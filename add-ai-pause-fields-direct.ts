/**
 * ETAPA 2: Migra√ß√£o Direta - Sistema de Pausa Autom√°tica da IA
 * Adiciona campos usando SQL direto via Supabase
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function addAiPauseFieldsDirect() {
  console.log('üöÄ ETAPA 2: Migra√ß√£o direta - Sistema de Pausa Autom√°tica da IA');
  console.log('üìù Adicionando campos: ai_paused_until, ai_paused_by_user_id, ai_pause_reason');
  console.log('');

  try {
    // Usar REST API para executar SQL direto
    const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec_sql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': process.env.SUPABASE_ANON_KEY!,
        'Authorization': `Bearer ${supabaseServiceKey}`,
      },
      body: JSON.stringify({
        sql: `
          -- Adicionar ai_paused_until
          ALTER TABLE conversations ADD COLUMN IF NOT EXISTS ai_paused_until TIMESTAMPTZ NULL;
          
          -- Adicionar ai_paused_by_user_id  
          ALTER TABLE conversations ADD COLUMN IF NOT EXISTS ai_paused_by_user_id INTEGER NULL;
          
          -- Adicionar ai_pause_reason
          ALTER TABLE conversations ADD COLUMN IF NOT EXISTS ai_pause_reason VARCHAR(50) NULL;
          
          -- Coment√°rios
          COMMENT ON COLUMN conversations.ai_paused_until IS 'Data/hora at√© quando a IA deve ficar pausada automaticamente. NULL = n√£o pausada';
          COMMENT ON COLUMN conversations.ai_paused_by_user_id IS 'ID do usu√°rio que causou a pausa autom√°tica da IA';
          COMMENT ON COLUMN conversations.ai_pause_reason IS 'Motivo da pausa autom√°tica: manual_message, user_request, etc.';
          
          -- √çndices de performance
          CREATE INDEX IF NOT EXISTS idx_conversations_ai_paused_clinic 
          ON conversations(clinic_id, ai_paused_until) 
          WHERE ai_paused_until IS NOT NULL;
          
          CREATE INDEX IF NOT EXISTS idx_conversations_paused_by_user 
          ON conversations(ai_paused_by_user_id) 
          WHERE ai_paused_by_user_id IS NOT NULL;
        `
      })
    });

    if (!response.ok) {
      console.log('‚ö†Ô∏è RPC exec_sql n√£o dispon√≠vel, tentando m√©todo alternativo...');
      
      // M√©todo alternativo: usar fetch direto para Edge Functions
      const altResponse = await fetch(`${supabaseUrl}/functions/v1/sql-migration`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${supabaseServiceKey}`,
        },
        body: JSON.stringify({
          query: `
            ALTER TABLE conversations ADD COLUMN IF NOT EXISTS ai_paused_until TIMESTAMPTZ NULL;
            ALTER TABLE conversations ADD COLUMN IF NOT EXISTS ai_paused_by_user_id INTEGER NULL;
            ALTER TABLE conversations ADD COLUMN IF NOT EXISTS ai_pause_reason VARCHAR(50) NULL;
          `
        })
      });

      if (!altResponse.ok) {
        console.log('‚ö†Ô∏è Edge Functions tamb√©m n√£o dispon√≠vel, usando m√©todo de teste direto...');
        
        // M√©todo de teste: tentar executar query simples para verificar se as colunas existem
        const { data: testResult, error: testError } = await supabase
          .from('conversations')
          .select('id, ai_active, ai_paused_until, ai_paused_by_user_id, ai_pause_reason')
          .limit(1);
        
        if (testError && testError.message.includes('does not exist')) {
          console.log('‚ùå Colunas n√£o existem ainda. Ser√° necess√°rio executar a migra√ß√£o manualmente.');
          console.log('');
          console.log('üîß Execute os seguintes comandos SQL no painel do Supabase:');
          console.log('');
          console.log('ALTER TABLE conversations ADD COLUMN IF NOT EXISTS ai_paused_until TIMESTAMPTZ NULL;');
          console.log('ALTER TABLE conversations ADD COLUMN IF NOT EXISTS ai_paused_by_user_id INTEGER NULL;');
          console.log('ALTER TABLE conversations ADD COLUMN IF NOT EXISTS ai_pause_reason VARCHAR(50) NULL;');
          console.log('');
          console.log('CREATE INDEX IF NOT EXISTS idx_conversations_ai_paused_clinic ON conversations(clinic_id, ai_paused_until) WHERE ai_paused_until IS NOT NULL;');
          console.log('CREATE INDEX IF NOT EXISTS idx_conversations_paused_by_user ON conversations(ai_paused_by_user_id) WHERE ai_paused_by_user_id IS NOT NULL;');
          console.log('');
          
          return false;
        } else if (testResult && testResult.length > 0) {
          console.log('‚úÖ Colunas j√° existem! Migra√ß√£o foi executada anteriormente');
          console.log('üìä Estrutura verificada:', Object.keys(testResult[0]));
          return true;
        }
      } else {
        console.log('‚úÖ Migra√ß√£o executada via Edge Functions');
        return true;
      }
    } else {
      console.log('‚úÖ Migra√ß√£o executada via RPC exec_sql');
      return true;
    }

    // Verificar se a migra√ß√£o funcionou
    console.log('üîç Verificando resultado da migra√ß√£o...');
    
    const { data: verifyResult, error: verifyError } = await supabase
      .from('conversations')
      .select('id, ai_active, ai_paused_until, ai_paused_by_user_id, ai_pause_reason')
      .limit(1);
    
    if (verifyError) {
      console.log('‚ùå Erro na verifica√ß√£o:', verifyError.message);
      return false;
    } else {
      console.log('‚úÖ Migra√ß√£o bem-sucedida! Colunas dispon√≠veis:');
      console.log('üìä Campos da conversa:', Object.keys(verifyResult[0] || {}));
      
      console.log('');
      console.log('üéâ ETAPA 2 CONCLU√çDA: Sistema de Pausa Autom√°tica da IA');
      console.log('üìä Campos adicionados:');
      console.log('   ‚úÖ ai_paused_until: controla pausa autom√°tica por tempo');
      console.log('   ‚úÖ ai_paused_by_user_id: rastreia quem causou a pausa');
      console.log('   ‚úÖ ai_pause_reason: registra motivo da pausa');
      console.log('   ‚úÖ ai_active: controle manual existente (preservado)');
      console.log('');
      console.log('üß† L√≥gica integrada:');
      console.log('   - IA responde somente quando: ai_active = true E ai_paused_until √© null/passado');
      console.log('   - Bot√£o IA controla ai_active (usu√°rio)');
      console.log('   - Mensagens manuais de profissionais pausam automaticamente (ai_paused_until)');
      
      return true;
    }

  } catch (error) {
    console.error('‚ùå Erro na migra√ß√£o:', error);
    return false;
  }
}

// Executar migra√ß√£o se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  addAiPauseFieldsDirect()
    .then((success) => {
      if (success) {
        console.log('‚úÖ Migra√ß√£o conclu√≠da com sucesso!');
        process.exit(0);
      } else {
        console.log('‚ö†Ô∏è Migra√ß√£o precisa ser executada manualmente');
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error('‚ùå Falha na migra√ß√£o:', error);
      process.exit(1);
    });
}

export { addAiPauseFieldsDirect };