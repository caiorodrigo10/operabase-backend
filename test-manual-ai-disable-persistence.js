/**
 * Teste Abrangente: Persist√™ncia da Desativa√ß√£o Manual da IA
 * Valida que IA desativada manualmente n√£o √© reativada por mensagens do sistema
 */

const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Configura√ß√£o do teste
const BASE_URL = 'http://localhost:5000/api';
const CONVERSATION_ID = '5511965860124551150391104';

async function testManualAiDisablePersistence() {
  console.log('üß™ TESTE: Persist√™ncia da Desativa√ß√£o Manual da IA');
  console.log('=================================================');

  try {
    // 1. Login
    console.log('\n1Ô∏è‚É£ Fazendo login...');
    const loginResponse = await fetch(`${BASE_URL}/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'cr@caiorodrigo.com.br',
        password: 'senha123'
      })
    });

    if (!loginResponse.ok) {
      throw new Error('Falha no login');
    }

    const cookies = loginResponse.headers.raw()['set-cookie'];
    const cookieHeader = cookies.map(cookie => cookie.split(';')[0]).join('; ');
    console.log('‚úÖ Login realizado');

    // 2. Verificar estado inicial
    console.log('\n2Ô∏è‚É£ Verificando estado inicial...');
    const { data: initialState } = await supabase
      .from('conversations')
      .select('ai_active, ai_pause_reason, ai_paused_until')
      .eq('id', CONVERSATION_ID)
      .single();

    console.log('üìä Estado inicial:', initialState);

    // 3. Desativar IA manualmente
    console.log('\n3Ô∏è‚É£ Desativando IA manualmente...');
    const toggleResponse = await fetch(`${BASE_URL}/conversations-simple/${CONVERSATION_ID}/ai-toggle`, {
      method: 'PATCH',
      headers: { 'Cookie': cookieHeader }
    });

    if (!toggleResponse.ok) {
      throw new Error('Falha ao desativar IA');
    }
    console.log('‚úÖ IA desativada manualmente');

    // 4. Verificar estado ap√≥s desativa√ß√£o manual
    console.log('\n4Ô∏è‚É£ Verificando estado ap√≥s desativa√ß√£o manual...');
    const { data: manualDisabledState } = await supabase
      .from('conversations')
      .select('ai_active, ai_pause_reason, ai_paused_until')
      .eq('id', CONVERSATION_ID)
      .single();

    console.log('üìä Estado ap√≥s desativa√ß√£o manual:', manualDisabledState);

    if (manualDisabledState.ai_active !== false) {
      throw new Error('IA deveria estar desativada ap√≥s toggle manual');
    }

    if (manualDisabledState.ai_pause_reason !== 'manual') {
      throw new Error('ai_pause_reason deveria ser "manual"');
    }

    console.log('‚úÖ Desativa√ß√£o manual aplicada corretamente');

    // 5. Enviar mensagem do sistema (que normalmente pausaria IA)
    console.log('\n5Ô∏è‚É£ Enviando mensagem do sistema...');
    const messageResponse = await fetch(`${BASE_URL}/conversations-simple/${CONVERSATION_ID}/messages`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Cookie': cookieHeader
      },
      body: JSON.stringify({
        content: `Teste persist√™ncia manual - ${new Date().toLocaleTimeString()}`,
        sender_type: 'professional',
        device_type: 'system'
      })
    });

    if (!messageResponse.ok) {
      throw new Error('Falha ao enviar mensagem');
    }
    console.log('‚úÖ Mensagem do sistema enviada');

    // 6. Aguardar processamento
    await new Promise(resolve => setTimeout(resolve, 3000));

    // 7. Verificar se IA permaneceu desativada
    console.log('\n6Ô∏è‚É£ Verificando persist√™ncia da desativa√ß√£o manual...');
    const { data: finalState } = await supabase
      .from('conversations')
      .select('ai_active, ai_pause_reason, ai_paused_until')
      .eq('id', CONVERSATION_ID)
      .single();

    console.log('üìä Estado final:', finalState);

    // 8. Valida√ß√£o dos resultados
    console.log('\n7Ô∏è‚É£ VALIDA√á√ÉO DOS RESULTADOS:');
    console.log('============================');

    if (finalState.ai_active === false && finalState.ai_pause_reason === 'manual') {
      console.log('‚úÖ TESTE PASSOU: IA permaneceu desativada manualmente');
      console.log('‚úÖ ai_pause_reason mant√©m "manual"');
      console.log('‚úÖ Sistema n√£o sobrescreveu desativa√ß√£o manual');
    } else {
      console.log('‚ùå TESTE FALHOU: Sistema alterou desativa√ß√£o manual');
      console.log('‚ùå Esperado: ai_active=false, ai_pause_reason="manual"');
      console.log(`‚ùå Obtido: ai_active=${finalState.ai_active}, ai_pause_reason="${finalState.ai_pause_reason}"`);
      return;
    }

    // 9. Teste de reativa√ß√£o manual
    console.log('\n8Ô∏è‚É£ Testando reativa√ß√£o manual...');
    const reactivateResponse = await fetch(`${BASE_URL}/conversations-simple/${CONVERSATION_ID}/ai-toggle`, {
      method: 'PATCH',
      headers: { 'Cookie': cookieHeader }
    });

    if (!reactivateResponse.ok) {
      throw new Error('Falha ao reativar IA');
    }

    const { data: reactivatedState } = await supabase
      .from('conversations')
      .select('ai_active, ai_pause_reason, ai_paused_until')
      .eq('id', CONVERSATION_ID)
      .single();

    console.log('üìä Estado ap√≥s reativa√ß√£o manual:', reactivatedState);

    if (reactivatedState.ai_active === true && !reactivatedState.ai_pause_reason) {
      console.log('‚úÖ Reativa√ß√£o manual funcionando corretamente');
    } else {
      console.log('‚ùå Problema na reativa√ß√£o manual');
    }

    console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
    console.log('===============================');
    console.log('‚úÖ Desativa√ß√£o manual da IA persiste atrav√©s de mensagens do sistema');
    console.log('‚úÖ ai_pause_reason="manual" protege contra reativa√ß√£o autom√°tica');
    console.log('‚úÖ Sistema respeita controle manual do profissional');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }
}

// Executar teste
testManualAiDisablePersistence();