/**
 * Teste completo do fluxo de convites de cl√≠nica
 * Valida cria√ß√£o, listagem e link p√∫blico
 */

const baseUrl = 'http://localhost:5000/api/clinics';

async function testInvitationFlow() {
  console.log('üß™ TESTE COMPLETO DO FLUXO DE CONVITES DE CL√çNICA\n');

  // ETAPA 1: Login como super_admin
  console.log('1Ô∏è‚É£ Fazendo login como super_admin...');
  const loginResponse = await fetch('http://localhost:5000/api/auth/login', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      email: 'cr@caiorodrigo.com.br',
      password: 'digibrands123'
    })
  });

  if (!loginResponse.ok) {
    console.error('‚ùå Erro no login:', await loginResponse.text());
    return;
  }

  const loginData = await loginResponse.json();
  const cookies = loginResponse.headers.get('set-cookie');
  console.log('‚úÖ Login realizado:', loginData.user.email);

  // ETAPA 2: Criar convite
  console.log('\n2Ô∏è‚É£ Criando convite de cl√≠nica...');
  const invitationData = {
    admin_email: 'admin.teste@example.com',
    admin_name: 'Admin de Teste',
    clinic_name: 'Cl√≠nica Teste Convites'
  };

  const createResponse = await fetch(`${baseUrl}/invitations`, {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Cookie': cookies 
    },
    body: JSON.stringify(invitationData)
  });

  if (!createResponse.ok) {
    console.error('‚ùå Erro ao criar convite:', await createResponse.text());
    return;
  }

  const createResult = await createResponse.json();
  console.log('‚úÖ Convite criado:', createResult);
  
  const { token, id: invitationId } = createResult;

  // ETAPA 3: Verificar se aparece na listagem
  console.log('\n3Ô∏è‚É£ Verificando listagem de convites...');
  const listResponse = await fetch(`${baseUrl}/invitations`, {
    headers: { 'Cookie': cookies }
  });

  if (!listResponse.ok) {
    console.error('‚ùå Erro ao listar convites:', await listResponse.text());
    return;
  }

  const listResult = await listResponse.json();
  console.log('üìã Convites encontrados:', listResult.length);
  
  const foundInvitation = listResult.find(inv => inv.id === invitationId);
  if (foundInvitation) {
    console.log('‚úÖ Convite encontrado na listagem:', foundInvitation.clinic_name);
  } else {
    console.log('‚ùå Convite N√ÉO encontrado na listagem');
    console.log('üîç IDs na lista:', listResult.map(inv => inv.id));
  }

  // ETAPA 4: Testar acesso p√∫blico ao convite
  console.log('\n4Ô∏è‚É£ Testando acesso p√∫blico ao convite...');
  const publicResponse = await fetch(`${baseUrl}/invitations/${token}`);

  if (!publicResponse.ok) {
    console.error('‚ùå Erro ao acessar convite p√∫blico:', await publicResponse.text());
    return;
  }

  const publicResult = await publicResponse.json();
  console.log('‚úÖ Convite acess√≠vel publicamente:', publicResult.clinic_name);

  // ETAPA 5: Testar URL do frontend
  console.log('\n5Ô∏è‚É£ Testando URL do frontend...');
  const frontendUrl = `http://localhost:5000/convite-clinica/${token}`;
  console.log('üåê URL do frontend:', frontendUrl);
  
  try {
    const frontendResponse = await fetch(frontendUrl);
    if (frontendResponse.ok) {
      console.log('‚úÖ Frontend responde corretamente (status:', frontendResponse.status, ')');
    } else {
      console.log('‚ö†Ô∏è Frontend resposta:', frontendResponse.status);
    }
  } catch (error) {
    console.log('‚ùå Erro no frontend:', error.message);
  }

  // ETAPA 6: Cancelar convite para limpeza
  console.log('\n6Ô∏è‚É£ Limpando convite de teste...');
  const cancelResponse = await fetch(`${baseUrl}/invitations/${invitationId}`, {
    method: 'DELETE',
    headers: { 'Cookie': cookies }
  });

  if (cancelResponse.ok) {
    console.log('‚úÖ Convite cancelado com sucesso');
  } else {
    console.log('‚ö†Ô∏è Erro ao cancelar convite:', await cancelResponse.text());
  }

  console.log('\nüéØ TESTE CONCLU√çDO!');
  console.log('üìù Resumo:');
  console.log('- Cria√ß√£o de convite:', createResponse.ok ? '‚úÖ' : '‚ùå');
  console.log('- Listagem:', foundInvitation ? '‚úÖ' : '‚ùå');
  console.log('- Acesso p√∫blico:', publicResponse.ok ? '‚úÖ' : '‚ùå');
  console.log('- Frontend URL:', frontendUrl);
}

// Executar teste
testInvitationFlow().catch(console.error);