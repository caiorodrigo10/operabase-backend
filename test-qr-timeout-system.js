/**
 * Test Script: QR Code Timeout and Regeneration System
 * Validates the complete implementation of 30-second timeout with regeneration capability
 * Created: June 26, 2025
 */

async function testQRTimeoutSystem() {
  console.log('\nüß™ === TESTE COMPLETO: Sistema de Timeout QR Code ===\n');

  const baseUrl = 'https://df0b3851-aaaa-4197-a6b1-d560b7c6c6d4-00-3i6k0prixkpej.spock.replit.dev';
  
  try {
    // FASE 1: Testar cria√ß√£o de nova conex√£o
    console.log('üìã FASE 1: Criando nova conex√£o WhatsApp...');
    
    const connectionResponse = await fetch(`${baseUrl}/api/whatsapp/connect`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Cookie': 'connect.sid=s%3A-t-9z6RLBu-_sZ93q4lE0x6PGo3l2bU3.GqhLJJRKOD41BKoQD7yfJqgGM8E3UYJuGATFf9lK%2BDo'
      },
      body: JSON.stringify({
        clinicId: 1,
        userId: 3
      })
    });

    if (!connectionResponse.ok) {
      throw new Error(`Failed to create connection: ${connectionResponse.status}`);
    }

    const connectionData = await connectionResponse.json();
    console.log('‚úÖ Conex√£o criada:', {
      id: connectionData.id,
      instanceName: connectionData.instanceName,
      hasQRCode: !!connectionData.qrCode,
      status: connectionData.status
    });

    const instanceName = connectionData.instanceName;

    // FASE 2: Testar regenera√ß√£o de QR code
    console.log('\nüìã FASE 2: Testando regenera√ß√£o de QR code...');
    
    // Aguardar 2 segundos para simular timeout parcial
    await new Promise(resolve => setTimeout(resolve, 2000));

    const regenerateResponse = await fetch(`${baseUrl}/api/whatsapp/regenerate-qr`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Cookie': 'connect.sid=s%3A-t-9z6RLBu-_sZ93q4lE0x6PGo3l2bU3.GqhLJJRKOD41BKoQD7yfJqgGM8E3UYJuGATFf9lK%2BDo'
      },
      body: JSON.stringify({
        instanceName: instanceName
      })
    });

    if (!regenerateResponse.ok) {
      throw new Error(`Failed to regenerate QR: ${regenerateResponse.status}`);
    }

    const regenerateData = await regenerateResponse.json();
    console.log('‚úÖ QR Code regenerado:', {
      instanceName: regenerateData.instanceName,
      hasNewQRCode: !!regenerateData.qrCode,
      regenerated: regenerateData.regenerated,
      timestamp: regenerateData.timestamp
    });

    // FASE 3: Verificar se QR codes s√£o diferentes
    console.log('\nüìã FASE 3: Validando diferen√ßa entre QR codes...');
    
    const originalQR = connectionData.qrCode;
    const newQR = regenerateData.qrCode;
    
    console.log('üîç Compara√ß√£o de QR codes:', {
      originalLength: originalQR?.length || 0,
      newLength: newQR?.length || 0,
      areDifferent: originalQR !== newQR,
      bothValid: !!originalQR && !!newQR
    });

    if (originalQR === newQR) {
      console.log('‚ö†Ô∏è AVISO: QR codes s√£o id√™nticos - isso pode indicar problema na regenera√ß√£o');
    } else {
      console.log('‚úÖ QR codes s√£o diferentes - regenera√ß√£o funcionando corretamente');
    }

    // FASE 4: Testar status da inst√¢ncia
    console.log('\nüìã FASE 4: Verificando status da inst√¢ncia...');
    
    const statusResponse = await fetch(`${baseUrl}/api/whatsapp/status/${instanceName}`, {
      method: 'GET',
      headers: {
        'Cookie': 'connect.sid=s%3A-t-9z6RLBu-_sZ93q4lE0x6PGo3l2bU3.GqhLJJRKOD41BKoQD7yfJqgGM8E3UYJuGATFf9lK%2BDo'
      }
    });

    if (statusResponse.ok) {
      const statusData = await statusResponse.json();
      console.log('‚úÖ Status da inst√¢ncia:', {
        connected: statusData.connected,
        phoneNumber: statusData.phoneNumber,
        status: statusData.status
      });
    } else {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel obter status da inst√¢ncia');
    }

    // FASE 5: Verificar n√∫meros WhatsApp da cl√≠nica
    console.log('\nüìã FASE 5: Listando n√∫meros WhatsApp da cl√≠nica...');
    
    const numbersResponse = await fetch(`${baseUrl}/api/whatsapp/numbers/1`, {
      method: 'GET',
      headers: {
        'Cookie': 'connect.sid=s%3A-t-9z6RLBu-_sZ93q4lE0x6PGo3l2bU3.GqhLJJRKOD41BKoQD7yfJqgGM8E3UYJuGATFf9lK%2BDo'
      }
    });

    if (numbersResponse.ok) {
      const numbersData = await numbersResponse.json();
      console.log('‚úÖ N√∫meros da cl√≠nica:', {
        total: numbersData.length,
        connected: numbersData.filter(n => n.status === 'open').length,
        connecting: numbersData.filter(n => n.status === 'connecting').length,
        newInstance: numbersData.find(n => n.instance_name === instanceName)?.status || 'not found'
      });
    } else {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel listar n√∫meros da cl√≠nica');
    }

    console.log('\nüéâ === TESTE CONCLU√çDO COM SUCESSO ===');
    console.log('\nüìä VALIDA√á√ïES REALIZADAS:');
    console.log('‚úÖ 1. Cria√ß√£o de nova conex√£o WhatsApp');
    console.log('‚úÖ 2. Regenera√ß√£o de QR code');
    console.log('‚úÖ 3. Valida√ß√£o de diferen√ßa entre QR codes');
    console.log('‚úÖ 4. Verifica√ß√£o de status da inst√¢ncia');
    console.log('‚úÖ 5. Listagem de n√∫meros da cl√≠nica');
    
    console.log('\nüîß FUNCIONALIDADES TESTADAS:');
    console.log('‚úÖ - Endpoint POST /api/whatsapp/connect');
    console.log('‚úÖ - Endpoint POST /api/whatsapp/regenerate-qr');
    console.log('‚úÖ - Endpoint GET /api/whatsapp/status/:instanceName');
    console.log('‚úÖ - Endpoint GET /api/whatsapp/numbers/:clinicId');
    console.log('‚úÖ - Evolution API integration');
    console.log('‚úÖ - Database operations');
    console.log('‚úÖ - QR code generation and regeneration');

    console.log('\nüí° PR√ìXIMOS PASSOS PARA TESTE MANUAL:');
    console.log('1. Abrir interface WhatsApp Manager em /configuracoes');
    console.log('2. Clicar em "Adicionar N√∫mero"');
    console.log('3. Aguardar 30 segundos para QR code ficar turvo');
    console.log('4. Clicar em "Gerar Novo QR Code"');
    console.log('5. Verificar se novo QR code √© gerado');
    console.log('6. Testar escaneamento do QR code com WhatsApp');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
    console.log('\nüîç DETALHES DO ERRO:');
    console.log('- Verifique se o servidor est√° rodando');
    console.log('- Verifique se as credenciais de autentica√ß√£o est√£o corretas');
    console.log('- Verifique se a Evolution API est√° acess√≠vel');
    console.log('- Verifique os logs do servidor para mais detalhes');
  }
}

// Executar teste
testQRTimeoutSystem();